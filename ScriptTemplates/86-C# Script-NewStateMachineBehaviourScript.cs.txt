/** 
----------------------------------
 *Copyright(C) 2019 by #Company#
 *All rights reserved.
 *FileName:     #SCRIPTNAME#
 *Author:       #AuthorName#
 *Version:      #Version#
 *AuthorEmail:  #AuthorEmail#
 *UnityVersionï¼š#UnityVersion#
 *CreateTime:   #CreateTime#
 *Description:  #Description# 
 *History:
 ----------------------------------
*/
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class #SCRIPTNAME# : StateMachineBehaviour
{
    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
    //override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    #NOTRIM#
    //}

    // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
    //override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    #NOTRIM#
    //}

    // OnStateExit is called when a transition ends and the state machine finishes evaluating this state
    //override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    #NOTRIM#
    //}

    // OnStateMove is called right after Animator.OnAnimatorMove()
    //override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    // Implement code that processes and affects root motion
    //}

    // OnStateIK is called right after Animator.OnAnimatorIK()
    //override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    //{
    //    // Implement code that sets up animation IK (inverse kinematics)
    //}
}
